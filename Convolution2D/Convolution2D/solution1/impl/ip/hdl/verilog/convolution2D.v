// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolution2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=54,HLS_SYN_FF=2273,HLS_SYN_LUT=2324,HLS_VERSION=2018_3}" *)

module convolution2D (
        ap_clk,
        ap_rst_n,
        s_axi_conv_io_AWVALID,
        s_axi_conv_io_AWREADY,
        s_axi_conv_io_AWADDR,
        s_axi_conv_io_WVALID,
        s_axi_conv_io_WREADY,
        s_axi_conv_io_WDATA,
        s_axi_conv_io_WSTRB,
        s_axi_conv_io_ARVALID,
        s_axi_conv_io_ARREADY,
        s_axi_conv_io_ARADDR,
        s_axi_conv_io_RVALID,
        s_axi_conv_io_RREADY,
        s_axi_conv_io_RDATA,
        s_axi_conv_io_RRESP,
        s_axi_conv_io_BVALID,
        s_axi_conv_io_BREADY,
        s_axi_conv_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_pp0_stage1 = 8'd4;
parameter    ap_ST_fsm_pp0_stage2 = 8'd8;
parameter    ap_ST_fsm_pp0_stage3 = 8'd16;
parameter    ap_ST_fsm_pp0_stage4 = 8'd32;
parameter    ap_ST_fsm_pp0_stage5 = 8'd64;
parameter    ap_ST_fsm_state14 = 8'd128;
parameter    C_S_AXI_CONV_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_CONV_IO_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONV_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_conv_io_AWVALID;
output   s_axi_conv_io_AWREADY;
input  [C_S_AXI_CONV_IO_ADDR_WIDTH - 1:0] s_axi_conv_io_AWADDR;
input   s_axi_conv_io_WVALID;
output   s_axi_conv_io_WREADY;
input  [C_S_AXI_CONV_IO_DATA_WIDTH - 1:0] s_axi_conv_io_WDATA;
input  [C_S_AXI_CONV_IO_WSTRB_WIDTH - 1:0] s_axi_conv_io_WSTRB;
input   s_axi_conv_io_ARVALID;
output   s_axi_conv_io_ARREADY;
input  [C_S_AXI_CONV_IO_ADDR_WIDTH - 1:0] s_axi_conv_io_ARADDR;
output   s_axi_conv_io_RVALID;
input   s_axi_conv_io_RREADY;
output  [C_S_AXI_CONV_IO_DATA_WIDTH - 1:0] s_axi_conv_io_RDATA;
output  [1:0] s_axi_conv_io_RRESP;
output   s_axi_conv_io_BVALID;
input   s_axi_conv_io_BREADY;
output  [1:0] s_axi_conv_io_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [3:0] input_0_address0;
reg    input_0_ce0;
wire   [31:0] input_0_q0;
reg   [3:0] input_1_address0;
reg    input_1_ce0;
wire   [31:0] input_1_q0;
reg   [2:0] input_2_address0;
reg    input_2_ce0;
wire   [31:0] input_2_q0;
wire   [31:0] kernel_0_0;
wire   [31:0] kernel_0_1;
wire   [31:0] kernel_0_2;
wire   [31:0] kernel_1_0;
wire   [31:0] kernel_1_1;
wire   [31:0] kernel_1_2;
wire   [31:0] kernel_2_0;
wire   [31:0] kernel_2_1;
wire   [31:0] kernel_2_2;
reg   [3:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
reg   [31:0] output_r_d0;
reg   [1:0] i_reg_324;
reg   [1:0] i_reg_324_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] reg_336;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond3_reg_723;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state12_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state13_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
reg    ap_enable_reg_pp0_iter1;
reg  signed [31:0] reg_340;
reg  signed [31:0] reg_344;
wire   [31:0] grp_fu_353_p2;
reg   [31:0] reg_393;
wire   [31:0] grp_fu_358_p2;
reg   [31:0] reg_397;
wire   [31:0] grp_fu_373_p2;
reg   [31:0] reg_401;
wire   [0:0] exitcond3_fu_411_p2;
reg   [0:0] exitcond3_reg_723_pp0_iter1_reg;
wire   [1:0] i_1_fu_417_p2;
reg   [1:0] i_1_reg_727;
wire   [2:0] tmp_2_fu_428_p3;
reg   [2:0] tmp_2_reg_734;
wire   [63:0] tmp_5_fu_447_p3;
reg   [63:0] tmp_5_reg_754;
reg  signed [31:0] kernel_0_0_read_reg_764;
reg  signed [31:0] kernel_0_1_read_reg_770;
reg  signed [31:0] kernel_0_2_read_reg_776;
wire   [2:0] tmp_10_fu_460_p3;
reg   [2:0] tmp_10_reg_782;
wire   [63:0] tmp_11_fu_467_p1;
reg   [63:0] tmp_11_reg_787;
reg  signed [31:0] kernel_1_0_read_reg_802;
reg  signed [31:0] kernel_1_1_read_reg_808;
reg  signed [31:0] kernel_1_2_read_reg_814;
reg  signed [31:0] kernel_2_0_read_reg_820;
reg  signed [31:0] kernel_2_1_read_reg_826;
reg  signed [31:0] kernel_2_2_read_reg_832;
wire   [31:0] grp_fu_348_p2;
reg   [31:0] tmp_s_reg_838;
wire   [3:0] tmp_14_fu_487_p3;
reg   [3:0] tmp_14_reg_848;
wire   [63:0] tmp_15_fu_495_p1;
reg   [63:0] tmp_15_reg_853;
wire   [31:0] tmp_1_2_fu_500_p2;
reg   [31:0] tmp_1_2_reg_868;
wire   [31:0] tmp_1_2_0_2_fu_505_p2;
reg   [31:0] tmp_1_2_0_2_reg_873;
wire   [31:0] tmp_1_0_0_1_fu_510_p2;
reg   [31:0] tmp_1_0_0_1_reg_883;
wire   [63:0] tmp_13_fu_520_p3;
reg   [63:0] tmp_13_reg_888;
wire   [31:0] grp_fu_363_p2;
reg   [31:0] tmp_1_0_1_2_reg_898;
reg   [31:0] tmp_1_1_reg_903;
wire   [31:0] grp_fu_368_p2;
reg   [31:0] tmp_1_1_1_1_reg_908;
wire   [31:0] tmp_1_2_1_fu_529_p2;
reg   [31:0] tmp_1_2_1_reg_913;
reg  signed [31:0] input_2_load_2_reg_918;
wire   [31:0] grp_fu_378_p2;
reg   [31:0] tmp_1_0_2_2_reg_933;
wire   [31:0] tmp2_fu_534_p2;
reg   [31:0] tmp2_reg_938;
wire   [31:0] grp_fu_383_p2;
reg   [31:0] tmp_1_1_2_1_reg_943;
wire   [31:0] tmp9_fu_538_p2;
reg   [31:0] tmp9_reg_948;
wire   [31:0] tmp_1_2_1_2_fu_543_p2;
reg   [31:0] tmp_1_2_1_2_reg_953;
wire   [31:0] tmp_1_2_2_fu_548_p2;
reg   [31:0] tmp_1_2_2_reg_958;
wire   [31:0] tmp17_fu_553_p2;
reg   [31:0] tmp17_reg_963;
wire   [31:0] tmp_1_0_1_1_fu_557_p2;
reg   [31:0] tmp_1_0_1_1_reg_968;
wire   [31:0] grp_fu_405_p2;
reg   [31:0] tmp3_reg_983;
wire   [31:0] tmp_1_2_2_2_fu_577_p2;
reg   [31:0] tmp_1_2_2_2_reg_988;
wire   [31:0] grp_fu_388_p2;
reg   [31:0] tmp_1_0_2_reg_993;
reg   [31:0] tmp_1_1_1_2_reg_998;
reg   [31:0] tmp10_reg_1003;
reg   [31:0] tmp_1_2_1_1_reg_1008;
wire   [31:0] tmp16_fu_581_p2;
reg   [31:0] tmp16_reg_1013;
wire   [31:0] tmp_1_0_2_1_fu_586_p2;
reg   [31:0] tmp_1_0_2_1_reg_1018;
reg   [31:0] tmp_1_1_2_reg_1023;
reg   [31:0] tmp_1_1_2_2_reg_1028;
reg   [31:0] tmp_1_2_2_1_reg_1033;
wire   [31:0] tmp4_fu_604_p2;
reg   [31:0] tmp4_reg_1038;
wire   [31:0] tmp11_fu_623_p2;
reg   [31:0] tmp11_reg_1043;
wire   [31:0] tmp18_fu_642_p2;
reg   [31:0] tmp18_reg_1048;
wire  signed [4:0] tmp_7_fu_664_p2;
reg  signed [4:0] tmp_7_reg_1053;
wire   [31:0] sum_2_1_2_2_fu_689_p2;
reg   [31:0] sum_2_1_2_2_reg_1059;
wire   [31:0] sum_2_2_2_2_fu_698_p2;
reg   [31:0] sum_2_2_2_2_reg_1064;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage5_subdone;
reg   [1:0] ap_phi_mux_i_phi_fu_328_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_3_fu_436_p1;
wire   [63:0] tmp_fu_423_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_5_0_1_fu_456_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_5_0_2_fu_482_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_17_fu_567_p3;
wire    ap_block_pp0_stage5;
wire  signed [63:0] tmp_7_cast_fu_670_p1;
wire  signed [63:0] tmp_8_cast_fu_708_p1;
wire  signed [63:0] tmp_9_cast_fu_718_p1;
wire   [31:0] sum_2_0_2_2_fu_679_p2;
wire   [2:0] tmp_4_fu_442_p2;
wire   [2:0] i_cast_fu_472_p1;
wire   [2:0] tmp_4_0_2_fu_476_p2;
wire   [2:0] tmp_12_fu_515_p2;
wire   [3:0] tmp_16_fu_562_p2;
wire   [31:0] tmp7_fu_595_p2;
wire   [31:0] tmp6_fu_599_p2;
wire   [31:0] tmp5_fu_591_p2;
wire   [31:0] tmp14_fu_614_p2;
wire   [31:0] tmp13_fu_618_p2;
wire   [31:0] tmp12_fu_610_p2;
wire   [31:0] tmp21_fu_633_p2;
wire   [31:0] tmp20_fu_637_p2;
wire   [31:0] tmp19_fu_629_p2;
wire   [3:0] tmp_6_fu_652_p3;
wire   [4:0] p_shl_cast_fu_660_p1;
wire   [4:0] tmp_cast_fu_648_p1;
wire   [31:0] tmp1_fu_675_p2;
wire   [31:0] tmp8_fu_685_p2;
wire   [31:0] tmp15_fu_694_p2;
wire   [4:0] tmp_8_fu_703_p2;
wire   [4:0] tmp_9_fu_713_p2;
wire    ap_CS_fsm_state14;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

convolution2D_conv_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONV_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONV_IO_DATA_WIDTH ))
convolution2D_conv_io_s_axi_U(
    .AWVALID(s_axi_conv_io_AWVALID),
    .AWREADY(s_axi_conv_io_AWREADY),
    .AWADDR(s_axi_conv_io_AWADDR),
    .WVALID(s_axi_conv_io_WVALID),
    .WREADY(s_axi_conv_io_WREADY),
    .WDATA(s_axi_conv_io_WDATA),
    .WSTRB(s_axi_conv_io_WSTRB),
    .ARVALID(s_axi_conv_io_ARVALID),
    .ARREADY(s_axi_conv_io_ARREADY),
    .ARADDR(s_axi_conv_io_ARADDR),
    .RVALID(s_axi_conv_io_RVALID),
    .RREADY(s_axi_conv_io_RREADY),
    .RDATA(s_axi_conv_io_RDATA),
    .RRESP(s_axi_conv_io_RRESP),
    .BVALID(s_axi_conv_io_BVALID),
    .BREADY(s_axi_conv_io_BREADY),
    .BRESP(s_axi_conv_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_0_address0(input_0_address0),
    .input_0_ce0(input_0_ce0),
    .input_0_q0(input_0_q0),
    .input_1_address0(input_1_address0),
    .input_1_ce0(input_1_ce0),
    .input_1_q0(input_1_q0),
    .input_2_address0(input_2_address0),
    .input_2_ce0(input_2_ce0),
    .input_2_q0(input_2_q0),
    .kernel_0_0(kernel_0_0),
    .kernel_0_1(kernel_0_1),
    .kernel_0_2(kernel_0_2),
    .kernel_1_0(kernel_1_0),
    .kernel_1_1(kernel_1_1),
    .kernel_1_2(kernel_1_2),
    .kernel_2_0(kernel_2_0),
    .kernel_2_1(kernel_2_1),
    .kernel_2_2(kernel_2_2),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(output_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_324 <= i_1_reg_727;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_324 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond3_reg_723 <= exitcond3_fu_411_p2;
        exitcond3_reg_723_pp0_iter1_reg <= exitcond3_reg_723;
        i_reg_324_pp0_iter1_reg <= i_reg_324;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_727 <= i_1_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond3_reg_723 == 1'd0))) begin
        input_2_load_2_reg_918 <= input_2_q0;
        tmp_1_0_1_2_reg_898 <= grp_fu_363_p2;
        tmp_1_1_1_1_reg_908 <= grp_fu_368_p2;
        tmp_1_1_reg_903 <= grp_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond3_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        kernel_0_0_read_reg_764 <= kernel_0_0;
        kernel_0_1_read_reg_770 <= kernel_0_1;
        kernel_0_2_read_reg_776 <= kernel_0_2;
        kernel_1_0_read_reg_802 <= kernel_1_0;
        kernel_1_1_read_reg_808 <= kernel_1_1;
        kernel_1_2_read_reg_814 <= kernel_1_2;
        kernel_2_0_read_reg_820 <= kernel_2_0;
        kernel_2_1_read_reg_826 <= kernel_2_1;
        kernel_2_2_read_reg_832 <= kernel_2_2;
        tmp_10_reg_782[2 : 1] <= tmp_10_fu_460_p3[2 : 1];
        tmp_11_reg_787[2 : 1] <= tmp_11_fu_467_p1[2 : 1];
        tmp_5_reg_754[2 : 1] <= tmp_5_fu_447_p3[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (exitcond3_reg_723 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (exitcond3_reg_723 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond3_reg_723 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (exitcond3_reg_723 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond3_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_336 <= input_0_q0;
        reg_340 <= input_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (exitcond3_reg_723 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond3_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_344 <= input_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (exitcond3_reg_723 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (exitcond3_reg_723 == 1'd0)))) begin
        reg_393 <= grp_fu_353_p2;
        reg_397 <= grp_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (exitcond3_reg_723 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (exitcond3_reg_723 == 1'd0)))) begin
        reg_401 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond3_reg_723_pp0_iter1_reg == 1'd0))) begin
        sum_2_1_2_2_reg_1059 <= sum_2_1_2_2_fu_689_p2;
        sum_2_2_2_2_reg_1064 <= sum_2_2_2_2_fu_698_p2;
        tmp_7_reg_1053 <= tmp_7_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp10_reg_1003 <= grp_fu_405_p2;
        tmp_1_0_2_reg_993 <= grp_fu_388_p2;
        tmp_1_1_1_2_reg_998 <= grp_fu_363_p2;
        tmp_1_2_1_1_reg_1008 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (exitcond3_reg_723_pp0_iter1_reg == 1'd0))) begin
        tmp11_reg_1043 <= tmp11_fu_623_p2;
        tmp18_reg_1048 <= tmp18_fu_642_p2;
        tmp4_reg_1038 <= tmp4_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp16_reg_1013 <= tmp16_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (exitcond3_reg_723 == 1'd0))) begin
        tmp17_reg_963 <= tmp17_fu_553_p2;
        tmp2_reg_938 <= tmp2_fu_534_p2;
        tmp9_reg_948 <= tmp9_fu_538_p2;
        tmp_1_2_1_2_reg_953 <= tmp_1_2_1_2_fu_543_p2;
        tmp_1_2_2_reg_958 <= tmp_1_2_2_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (exitcond3_reg_723 == 1'd0))) begin
        tmp3_reg_983 <= grp_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond3_reg_723 == 1'd0))) begin
        tmp_13_reg_888[2 : 1] <= tmp_13_fu_520_p3[2 : 1];
        tmp_1_0_0_1_reg_883 <= tmp_1_0_0_1_fu_510_p2;
        tmp_1_2_1_reg_913 <= tmp_1_2_1_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (exitcond3_reg_723 == 1'd0))) begin
        tmp_14_reg_848[3 : 1] <= tmp_14_fu_487_p3[3 : 1];
        tmp_15_reg_853[3 : 1] <= tmp_15_fu_495_p1[3 : 1];
        tmp_1_2_0_2_reg_873 <= tmp_1_2_0_2_fu_505_p2;
        tmp_1_2_reg_868 <= tmp_1_2_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (exitcond3_reg_723 == 1'd0))) begin
        tmp_1_0_1_1_reg_968 <= tmp_1_0_1_1_fu_557_p2;
        tmp_1_2_2_2_reg_988 <= tmp_1_2_2_2_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond3_reg_723_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_1_0_2_1_reg_1018 <= tmp_1_0_2_1_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (exitcond3_reg_723 == 1'd0))) begin
        tmp_1_0_2_2_reg_933 <= grp_fu_378_p2;
        tmp_1_1_2_1_reg_943 <= grp_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond3_reg_723_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_1_1_2_2_reg_1028 <= grp_fu_378_p2;
        tmp_1_1_2_reg_1023 <= grp_fu_388_p2;
        tmp_1_2_2_1_reg_1033 <= grp_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_fu_411_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_734[2 : 1] <= tmp_2_fu_428_p3[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (exitcond3_reg_723 == 1'd0))) begin
        tmp_s_reg_838 <= grp_fu_348_p2;
    end
end

always @ (*) begin
    if ((exitcond3_fu_411_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_723 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_328_p4 = i_1_reg_727;
    end else begin
        ap_phi_mux_i_phi_fu_328_p4 = i_reg_324;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            input_0_address0 = tmp_17_fu_567_p3;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_0_address0 = tmp_15_reg_853;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_0_address0 = tmp_13_fu_520_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_0_address0 = tmp_11_reg_787;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_0_address0 = tmp_5_fu_447_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_0_address0 = tmp_3_fu_436_p1;
        end else begin
            input_0_address0 = 'bx;
        end
    end else begin
        input_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            input_1_address0 = tmp_17_fu_567_p3;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_1_address0 = tmp_13_reg_888;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_1_address0 = tmp_5_reg_754;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_1_address0 = tmp_15_fu_495_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_1_address0 = tmp_11_fu_467_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_1_address0 = tmp_3_fu_436_p1;
        end else begin
            input_1_address0 = 'bx;
        end
    end else begin
        input_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_2_address0 = tmp_5_0_2_fu_482_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_2_address0 = tmp_5_0_1_fu_456_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_2_address0 = tmp_fu_423_p1;
        end else begin
            input_2_address0 = 'bx;
        end
    end else begin
        input_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            output_r_address0 = tmp_9_cast_fu_718_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            output_r_address0 = tmp_8_cast_fu_708_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            output_r_address0 = tmp_7_cast_fu_670_p1;
        end else begin
            output_r_address0 = 'bx;
        end
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            output_r_d0 = sum_2_2_2_2_reg_1064;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            output_r_d0 = sum_2_1_2_2_reg_1059;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            output_r_d0 = sum_2_0_2_2_fu_679_p2;
        end else begin
            output_r_d0 = 'bx;
        end
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (exitcond3_reg_723_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (exitcond3_reg_723_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond3_reg_723_pp0_iter1_reg == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_411_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_411_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond3_fu_411_p2 = ((ap_phi_mux_i_phi_fu_328_p4 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_348_p2 = ($signed(reg_336) * $signed(kernel_0_0_read_reg_764));

assign grp_fu_353_p2 = ($signed(reg_340) * $signed(kernel_0_2_read_reg_776));

assign grp_fu_358_p2 = ($signed(reg_340) * $signed(kernel_0_1_read_reg_770));

assign grp_fu_363_p2 = ($signed(reg_340) * $signed(kernel_1_2_read_reg_814));

assign grp_fu_368_p2 = ($signed(reg_340) * $signed(kernel_1_1_read_reg_808));

assign grp_fu_373_p2 = ($signed(reg_336) * $signed(kernel_1_0_read_reg_802));

assign grp_fu_378_p2 = ($signed(reg_340) * $signed(kernel_2_2_read_reg_832));

assign grp_fu_383_p2 = ($signed(reg_340) * $signed(kernel_2_1_read_reg_826));

assign grp_fu_388_p2 = ($signed(reg_336) * $signed(kernel_2_0_read_reg_820));

assign grp_fu_405_p2 = (reg_393 + reg_401);

assign i_1_fu_417_p2 = (ap_phi_mux_i_phi_fu_328_p4 + 2'd1);

assign i_cast_fu_472_p1 = i_reg_324;

assign p_shl_cast_fu_660_p1 = tmp_6_fu_652_p3;

assign sum_2_0_2_2_fu_679_p2 = (tmp4_reg_1038 + tmp1_fu_675_p2);

assign sum_2_1_2_2_fu_689_p2 = (tmp11_reg_1043 + tmp8_fu_685_p2);

assign sum_2_2_2_2_fu_698_p2 = (tmp18_reg_1048 + tmp15_fu_694_p2);

assign tmp11_fu_623_p2 = (tmp13_fu_618_p2 + tmp12_fu_610_p2);

assign tmp12_fu_610_p2 = (tmp_1_1_1_1_reg_908 + tmp_1_1_1_2_reg_998);

assign tmp13_fu_618_p2 = (tmp14_fu_614_p2 + tmp_1_1_2_reg_1023);

assign tmp14_fu_614_p2 = (tmp_1_1_2_1_reg_943 + tmp_1_1_2_2_reg_1028);

assign tmp15_fu_694_p2 = (tmp17_reg_963 + tmp16_reg_1013);

assign tmp16_fu_581_p2 = (tmp_1_2_reg_868 + reg_397);

assign tmp17_fu_553_p2 = (tmp_1_2_0_2_reg_873 + tmp_1_2_1_reg_913);

assign tmp18_fu_642_p2 = (tmp20_fu_637_p2 + tmp19_fu_629_p2);

assign tmp19_fu_629_p2 = (tmp_1_2_1_1_reg_1008 + tmp_1_2_1_2_reg_953);

assign tmp1_fu_675_p2 = (tmp3_reg_983 + tmp2_reg_938);

assign tmp20_fu_637_p2 = (tmp21_fu_633_p2 + tmp_1_2_2_reg_958);

assign tmp21_fu_633_p2 = (tmp_1_2_2_1_reg_1033 + tmp_1_2_2_2_reg_988);

assign tmp2_fu_534_p2 = (tmp_s_reg_838 + tmp_1_0_0_1_reg_883);

assign tmp4_fu_604_p2 = (tmp6_fu_599_p2 + tmp5_fu_591_p2);

assign tmp5_fu_591_p2 = (tmp_1_0_1_1_reg_968 + tmp_1_0_1_2_reg_898);

assign tmp6_fu_599_p2 = (tmp7_fu_595_p2 + tmp_1_0_2_reg_993);

assign tmp7_fu_595_p2 = (tmp_1_0_2_1_reg_1018 + tmp_1_0_2_2_reg_933);

assign tmp8_fu_685_p2 = (tmp10_reg_1003 + tmp9_reg_948);

assign tmp9_fu_538_p2 = (tmp_1_1_reg_903 + reg_397);

assign tmp_10_fu_460_p3 = {{i_1_reg_727}, {1'd0}};

assign tmp_11_fu_467_p1 = tmp_10_fu_460_p3;

assign tmp_12_fu_515_p2 = (tmp_10_reg_782 | 3'd1);

assign tmp_13_fu_520_p3 = {{61'd0}, {tmp_12_fu_515_p2}};

assign tmp_14_fu_487_p3 = {{tmp_4_0_2_fu_476_p2}, {1'd0}};

assign tmp_15_fu_495_p1 = tmp_14_fu_487_p3;

assign tmp_16_fu_562_p2 = (tmp_14_reg_848 | 4'd1);

assign tmp_17_fu_567_p3 = {{60'd0}, {tmp_16_fu_562_p2}};

assign tmp_1_0_0_1_fu_510_p2 = ($signed(reg_336) * $signed(kernel_0_1_read_reg_770));

assign tmp_1_0_1_1_fu_557_p2 = ($signed(reg_336) * $signed(kernel_1_1_read_reg_808));

assign tmp_1_0_2_1_fu_586_p2 = ($signed(reg_336) * $signed(kernel_2_1_read_reg_826));

assign tmp_1_2_0_2_fu_505_p2 = ($signed(reg_344) * $signed(kernel_0_2_read_reg_776));

assign tmp_1_2_1_2_fu_543_p2 = ($signed(reg_344) * $signed(kernel_1_2_read_reg_814));

assign tmp_1_2_1_fu_529_p2 = ($signed(reg_340) * $signed(kernel_1_0_read_reg_802));

assign tmp_1_2_2_2_fu_577_p2 = ($signed(input_2_load_2_reg_918) * $signed(kernel_2_2_read_reg_832));

assign tmp_1_2_2_fu_548_p2 = ($signed(reg_340) * $signed(kernel_2_0_read_reg_820));

assign tmp_1_2_fu_500_p2 = ($signed(reg_340) * $signed(kernel_0_0_read_reg_764));

assign tmp_2_fu_428_p3 = {{ap_phi_mux_i_phi_fu_328_p4}, {1'd0}};

assign tmp_3_fu_436_p1 = tmp_2_fu_428_p3;

assign tmp_4_0_2_fu_476_p2 = (i_cast_fu_472_p1 + 3'd2);

assign tmp_4_fu_442_p2 = (tmp_2_reg_734 | 3'd1);

assign tmp_5_0_1_fu_456_p1 = i_1_reg_727;

assign tmp_5_0_2_fu_482_p1 = tmp_4_0_2_fu_476_p2;

assign tmp_5_fu_447_p3 = {{61'd0}, {tmp_4_fu_442_p2}};

assign tmp_6_fu_652_p3 = {{i_reg_324_pp0_iter1_reg}, {2'd0}};

assign tmp_7_cast_fu_670_p1 = tmp_7_fu_664_p2;

assign tmp_7_fu_664_p2 = (p_shl_cast_fu_660_p1 - tmp_cast_fu_648_p1);

assign tmp_8_cast_fu_708_p1 = $signed(tmp_8_fu_703_p2);

assign tmp_8_fu_703_p2 = ($signed(tmp_7_reg_1053) + $signed(5'd1));

assign tmp_9_cast_fu_718_p1 = $signed(tmp_9_fu_713_p2);

assign tmp_9_fu_713_p2 = ($signed(tmp_7_reg_1053) + $signed(5'd2));

assign tmp_cast_fu_648_p1 = i_reg_324_pp0_iter1_reg;

assign tmp_fu_423_p1 = ap_phi_mux_i_phi_fu_328_p4;

always @ (posedge ap_clk) begin
    tmp_2_reg_734[0] <= 1'b0;
    tmp_5_reg_754[0] <= 1'b1;
    tmp_5_reg_754[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_10_reg_782[0] <= 1'b0;
    tmp_11_reg_787[0] <= 1'b0;
    tmp_11_reg_787[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_14_reg_848[0] <= 1'b0;
    tmp_15_reg_853[0] <= 1'b0;
    tmp_15_reg_853[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_13_reg_888[0] <= 1'b1;
    tmp_13_reg_888[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //convolution2D
