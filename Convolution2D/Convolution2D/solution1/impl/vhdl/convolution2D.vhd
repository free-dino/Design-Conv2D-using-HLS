-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution2D is
generic (
    C_S_AXI_CONV_IO_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CONV_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_conv_io_AWVALID : IN STD_LOGIC;
    s_axi_conv_io_AWREADY : OUT STD_LOGIC;
    s_axi_conv_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_IO_ADDR_WIDTH-1 downto 0);
    s_axi_conv_io_WVALID : IN STD_LOGIC;
    s_axi_conv_io_WREADY : OUT STD_LOGIC;
    s_axi_conv_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_IO_DATA_WIDTH-1 downto 0);
    s_axi_conv_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_conv_io_ARVALID : IN STD_LOGIC;
    s_axi_conv_io_ARREADY : OUT STD_LOGIC;
    s_axi_conv_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_IO_ADDR_WIDTH-1 downto 0);
    s_axi_conv_io_RVALID : OUT STD_LOGIC;
    s_axi_conv_io_RREADY : IN STD_LOGIC;
    s_axi_conv_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONV_IO_DATA_WIDTH-1 downto 0);
    s_axi_conv_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_conv_io_BVALID : OUT STD_LOGIC;
    s_axi_conv_io_BREADY : IN STD_LOGIC;
    s_axi_conv_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolution2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolution2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=54,HLS_SYN_FF=2273,HLS_SYN_LUT=2324,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_0_ce0 : STD_LOGIC;
    signal input_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_1_ce0 : STD_LOGIC;
    signal input_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal input_2_ce0 : STD_LOGIC;
    signal input_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_0_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_0_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_0_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_324 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_324_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond3_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_723_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_417_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_727 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_428_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_reg_734 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_447_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_754 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_0_0_read_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_0_1_read_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_0_2_read_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_460_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_reg_782 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_787 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_1_0_read_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_1_read_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_2_read_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_0_read_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_1_read_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_2_read_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_487_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_848 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_reg_853 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_2_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_0_2_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_0_2_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_0_1_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_0_1_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_520_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_2_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_1_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_load_2_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_2_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_1_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_2_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_2_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp17_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp17_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_1_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_1_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_2_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_2_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_2_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_1_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_1_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_1_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_2_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_1_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp18_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp18_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_664_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_1053 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_2_1_2_2_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_1_2_2_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_2_2_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_2_2_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_328_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_3_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_5_0_1_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_5_0_2_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_17_fu_567_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal tmp_7_cast_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_0_2_2_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_442_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast_fu_472_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_0_2_fu_476_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_515_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_562_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp7_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp21_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp20_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp19_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_652_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_660_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_648_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_703_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_713_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component convolution2D_conv_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_0_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input_0_ce0 : IN STD_LOGIC;
        input_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_1_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input_1_ce0 : IN STD_LOGIC;
        input_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_2_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        input_2_ce0 : IN STD_LOGIC;
        input_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_0_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_0_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_0_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_1_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_1_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_1_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_2_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_2_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_2_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    convolution2D_conv_io_s_axi_U : component convolution2D_conv_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONV_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONV_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_conv_io_AWVALID,
        AWREADY => s_axi_conv_io_AWREADY,
        AWADDR => s_axi_conv_io_AWADDR,
        WVALID => s_axi_conv_io_WVALID,
        WREADY => s_axi_conv_io_WREADY,
        WDATA => s_axi_conv_io_WDATA,
        WSTRB => s_axi_conv_io_WSTRB,
        ARVALID => s_axi_conv_io_ARVALID,
        ARREADY => s_axi_conv_io_ARREADY,
        ARADDR => s_axi_conv_io_ARADDR,
        RVALID => s_axi_conv_io_RVALID,
        RREADY => s_axi_conv_io_RREADY,
        RDATA => s_axi_conv_io_RDATA,
        RRESP => s_axi_conv_io_RRESP,
        BVALID => s_axi_conv_io_BVALID,
        BREADY => s_axi_conv_io_BREADY,
        BRESP => s_axi_conv_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_0_address0 => input_0_address0,
        input_0_ce0 => input_0_ce0,
        input_0_q0 => input_0_q0,
        input_1_address0 => input_1_address0,
        input_1_ce0 => input_1_ce0,
        input_1_q0 => input_1_q0,
        input_2_address0 => input_2_address0,
        input_2_ce0 => input_2_ce0,
        input_2_q0 => input_2_q0,
        kernel_0_0 => kernel_0_0,
        kernel_0_1 => kernel_0_1,
        kernel_0_2 => kernel_0_2,
        kernel_1_0 => kernel_1_0,
        kernel_1_1 => kernel_1_1,
        kernel_1_2 => kernel_1_2,
        kernel_2_0 => kernel_2_0,
        kernel_2_1 => kernel_2_1,
        kernel_2_2 => kernel_2_2,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_reg_723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_324 <= i_1_reg_727;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_324 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond3_reg_723 <= exitcond3_fu_411_p2;
                exitcond3_reg_723_pp0_iter1_reg <= exitcond3_reg_723;
                i_reg_324_pp0_iter1_reg <= i_reg_324;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_1_reg_727 <= i_1_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond3_reg_723 = ap_const_lv1_0))) then
                input_2_load_2_reg_918 <= input_2_q0;
                tmp_1_0_1_2_reg_898 <= grp_fu_363_p2;
                tmp_1_1_1_1_reg_908 <= grp_fu_368_p2;
                tmp_1_1_reg_903 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond3_reg_723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                kernel_0_0_read_reg_764 <= kernel_0_0;
                kernel_0_1_read_reg_770 <= kernel_0_1;
                kernel_0_2_read_reg_776 <= kernel_0_2;
                kernel_1_0_read_reg_802 <= kernel_1_0;
                kernel_1_1_read_reg_808 <= kernel_1_1;
                kernel_1_2_read_reg_814 <= kernel_1_2;
                kernel_2_0_read_reg_820 <= kernel_2_0;
                kernel_2_1_read_reg_826 <= kernel_2_1;
                kernel_2_2_read_reg_832 <= kernel_2_2;
                    tmp_10_reg_782(2 downto 1) <= tmp_10_fu_460_p3(2 downto 1);
                    tmp_11_reg_787(2 downto 1) <= tmp_11_fu_467_p1(2 downto 1);
                    tmp_5_reg_754(2 downto 1) <= tmp_5_fu_447_p3(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond3_reg_723 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond3_reg_723 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond3_reg_723 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond3_reg_723 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond3_reg_723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_reg_723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_336 <= input_0_q0;
                reg_340 <= input_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond3_reg_723 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond3_reg_723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_344 <= input_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond3_reg_723 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond3_reg_723 = ap_const_lv1_0)))) then
                reg_393 <= grp_fu_353_p2;
                reg_397 <= grp_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond3_reg_723 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond3_reg_723 = ap_const_lv1_0)))) then
                reg_401 <= grp_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond3_reg_723_pp0_iter1_reg = ap_const_lv1_0))) then
                sum_2_1_2_2_reg_1059 <= sum_2_1_2_2_fu_689_p2;
                sum_2_2_2_2_reg_1064 <= sum_2_2_2_2_fu_698_p2;
                tmp_7_reg_1053 <= tmp_7_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_reg_723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp10_reg_1003 <= grp_fu_405_p2;
                tmp_1_0_2_reg_993 <= grp_fu_388_p2;
                tmp_1_1_1_2_reg_998 <= grp_fu_363_p2;
                tmp_1_2_1_1_reg_1008 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond3_reg_723_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp11_reg_1043 <= tmp11_fu_623_p2;
                tmp18_reg_1048 <= tmp18_fu_642_p2;
                tmp4_reg_1038 <= tmp4_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_reg_723 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp16_reg_1013 <= tmp16_fu_581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond3_reg_723 = ap_const_lv1_0))) then
                tmp17_reg_963 <= tmp17_fu_553_p2;
                tmp2_reg_938 <= tmp2_fu_534_p2;
                tmp9_reg_948 <= tmp9_fu_538_p2;
                tmp_1_2_1_2_reg_953 <= tmp_1_2_1_2_fu_543_p2;
                tmp_1_2_2_reg_958 <= tmp_1_2_2_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond3_reg_723 = ap_const_lv1_0))) then
                tmp3_reg_983 <= grp_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond3_reg_723 = ap_const_lv1_0))) then
                    tmp_13_reg_888(2 downto 1) <= tmp_13_fu_520_p3(2 downto 1);
                tmp_1_0_0_1_reg_883 <= tmp_1_0_0_1_fu_510_p2;
                tmp_1_2_1_reg_913 <= tmp_1_2_1_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond3_reg_723 = ap_const_lv1_0))) then
                    tmp_14_reg_848(3 downto 1) <= tmp_14_fu_487_p3(3 downto 1);
                    tmp_15_reg_853(3 downto 1) <= tmp_15_fu_495_p1(3 downto 1);
                tmp_1_2_0_2_reg_873 <= tmp_1_2_0_2_fu_505_p2;
                tmp_1_2_reg_868 <= tmp_1_2_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond3_reg_723 = ap_const_lv1_0))) then
                tmp_1_0_1_1_reg_968 <= tmp_1_0_1_1_fu_557_p2;
                tmp_1_2_2_2_reg_988 <= tmp_1_2_2_2_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond3_reg_723_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_0_2_1_reg_1018 <= tmp_1_0_2_1_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond3_reg_723 = ap_const_lv1_0))) then
                tmp_1_0_2_2_reg_933 <= grp_fu_378_p2;
                tmp_1_1_2_1_reg_943 <= grp_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond3_reg_723_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_1_2_2_reg_1028 <= grp_fu_378_p2;
                tmp_1_1_2_reg_1023 <= grp_fu_388_p2;
                tmp_1_2_2_1_reg_1033 <= grp_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_fu_411_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    tmp_2_reg_734(2 downto 1) <= tmp_2_fu_428_p3(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond3_reg_723 = ap_const_lv1_0))) then
                tmp_s_reg_838 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    tmp_2_reg_734(0) <= '0';
    tmp_5_reg_754(0) <= '1';
    tmp_5_reg_754(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_10_reg_782(0) <= '0';
    tmp_11_reg_787(0) <= '0';
    tmp_11_reg_787(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_14_reg_848(0) <= '0';
    tmp_15_reg_853(0) <= '0';
    tmp_15_reg_853(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_888(0) <= '1';
    tmp_13_reg_888(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, exitcond3_fu_411_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond3_fu_411_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond3_fu_411_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond3_fu_411_p2)
    begin
        if ((exitcond3_fu_411_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_328_p4_assign_proc : process(i_reg_324, ap_CS_fsm_pp0_stage0, exitcond3_reg_723, ap_enable_reg_pp0_iter1, i_1_reg_727, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_reg_723 = ap_const_lv1_0))) then 
            ap_phi_mux_i_phi_fu_328_p4 <= i_1_reg_727;
        else 
            ap_phi_mux_i_phi_fu_328_p4 <= i_reg_324;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond3_fu_411_p2 <= "1" when (ap_phi_mux_i_phi_fu_328_p4 = ap_const_lv2_3) else "0";
    grp_fu_348_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_336) * signed(kernel_0_0_read_reg_764))), 32));
    grp_fu_353_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_0_2_read_reg_776))), 32));
    grp_fu_358_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_0_1_read_reg_770))), 32));
    grp_fu_363_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_1_2_read_reg_814))), 32));
    grp_fu_368_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_1_1_read_reg_808))), 32));
    grp_fu_373_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_336) * signed(kernel_1_0_read_reg_802))), 32));
    grp_fu_378_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_2_2_read_reg_832))), 32));
    grp_fu_383_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_2_1_read_reg_826))), 32));
    grp_fu_388_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_336) * signed(kernel_2_0_read_reg_820))), 32));
    grp_fu_405_p2 <= std_logic_vector(unsigned(reg_393) + unsigned(reg_401));
    i_1_fu_417_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_328_p4) + unsigned(ap_const_lv2_1));
    i_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_324),3));

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_5_fu_447_p3, tmp_11_reg_787, tmp_15_reg_853, tmp_13_fu_520_p3, ap_block_pp0_stage0, tmp_3_fu_436_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, tmp_17_fu_567_p3, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                input_0_address0 <= tmp_17_fu_567_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_0_address0 <= tmp_15_reg_853(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_0_address0 <= tmp_13_fu_520_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_0_address0 <= tmp_11_reg_787(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_0_address0 <= tmp_5_fu_447_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_0_address0 <= tmp_3_fu_436_p1(4 - 1 downto 0);
            else 
                input_0_address0 <= "XXXX";
            end if;
        else 
            input_0_address0 <= "XXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_5_reg_754, tmp_11_fu_467_p1, tmp_15_fu_495_p1, tmp_13_reg_888, ap_block_pp0_stage0, tmp_3_fu_436_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, tmp_17_fu_567_p3, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                input_1_address0 <= tmp_17_fu_567_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_1_address0 <= tmp_13_reg_888(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_1_address0 <= tmp_5_reg_754(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_1_address0 <= tmp_15_fu_495_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_1_address0 <= tmp_11_fu_467_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_1_address0 <= tmp_3_fu_436_p1(4 - 1 downto 0);
            else 
                input_1_address0 <= "XXXX";
            end if;
        else 
            input_1_address0 <= "XXXX";
        end if; 
    end process;


    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, tmp_fu_423_p1, ap_block_pp0_stage1, tmp_5_0_1_fu_456_p1, ap_block_pp0_stage2, tmp_5_0_2_fu_482_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_2_address0 <= tmp_5_0_2_fu_482_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_2_address0 <= tmp_5_0_1_fu_456_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_2_address0 <= tmp_fu_423_p1(3 - 1 downto 0);
            else 
                input_2_address0 <= "XXX";
            end if;
        else 
            input_2_address0 <= "XXX";
        end if; 
    end process;


    input_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, tmp_7_cast_fu_670_p1, tmp_8_cast_fu_708_p1, tmp_9_cast_fu_718_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                output_r_address0 <= tmp_9_cast_fu_718_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                output_r_address0 <= tmp_8_cast_fu_708_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                output_r_address0 <= tmp_7_cast_fu_670_p1(4 - 1 downto 0);
            else 
                output_r_address0 <= "XXXX";
            end if;
        else 
            output_r_address0 <= "XXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, sum_2_1_2_2_reg_1059, sum_2_2_2_2_reg_1064, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, sum_2_0_2_2_fu_679_p2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                output_r_d0 <= sum_2_2_2_2_reg_1064;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                output_r_d0 <= sum_2_1_2_2_reg_1059;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                output_r_d0 <= sum_2_0_2_2_fu_679_p2;
            else 
                output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1, exitcond3_reg_723_pp0_iter1_reg)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond3_reg_723_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond3_reg_723_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond3_reg_723_pp0_iter1_reg = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_652_p3),5));
    sum_2_0_2_2_fu_679_p2 <= std_logic_vector(unsigned(tmp4_reg_1038) + unsigned(tmp1_fu_675_p2));
    sum_2_1_2_2_fu_689_p2 <= std_logic_vector(unsigned(tmp11_reg_1043) + unsigned(tmp8_fu_685_p2));
    sum_2_2_2_2_fu_698_p2 <= std_logic_vector(unsigned(tmp18_reg_1048) + unsigned(tmp15_fu_694_p2));
    tmp11_fu_623_p2 <= std_logic_vector(unsigned(tmp13_fu_618_p2) + unsigned(tmp12_fu_610_p2));
    tmp12_fu_610_p2 <= std_logic_vector(unsigned(tmp_1_1_1_1_reg_908) + unsigned(tmp_1_1_1_2_reg_998));
    tmp13_fu_618_p2 <= std_logic_vector(unsigned(tmp14_fu_614_p2) + unsigned(tmp_1_1_2_reg_1023));
    tmp14_fu_614_p2 <= std_logic_vector(unsigned(tmp_1_1_2_1_reg_943) + unsigned(tmp_1_1_2_2_reg_1028));
    tmp15_fu_694_p2 <= std_logic_vector(unsigned(tmp17_reg_963) + unsigned(tmp16_reg_1013));
    tmp16_fu_581_p2 <= std_logic_vector(unsigned(tmp_1_2_reg_868) + unsigned(reg_397));
    tmp17_fu_553_p2 <= std_logic_vector(unsigned(tmp_1_2_0_2_reg_873) + unsigned(tmp_1_2_1_reg_913));
    tmp18_fu_642_p2 <= std_logic_vector(unsigned(tmp20_fu_637_p2) + unsigned(tmp19_fu_629_p2));
    tmp19_fu_629_p2 <= std_logic_vector(unsigned(tmp_1_2_1_1_reg_1008) + unsigned(tmp_1_2_1_2_reg_953));
    tmp1_fu_675_p2 <= std_logic_vector(unsigned(tmp3_reg_983) + unsigned(tmp2_reg_938));
    tmp20_fu_637_p2 <= std_logic_vector(unsigned(tmp21_fu_633_p2) + unsigned(tmp_1_2_2_reg_958));
    tmp21_fu_633_p2 <= std_logic_vector(unsigned(tmp_1_2_2_1_reg_1033) + unsigned(tmp_1_2_2_2_reg_988));
    tmp2_fu_534_p2 <= std_logic_vector(unsigned(tmp_s_reg_838) + unsigned(tmp_1_0_0_1_reg_883));
    tmp4_fu_604_p2 <= std_logic_vector(unsigned(tmp6_fu_599_p2) + unsigned(tmp5_fu_591_p2));
    tmp5_fu_591_p2 <= std_logic_vector(unsigned(tmp_1_0_1_1_reg_968) + unsigned(tmp_1_0_1_2_reg_898));
    tmp6_fu_599_p2 <= std_logic_vector(unsigned(tmp7_fu_595_p2) + unsigned(tmp_1_0_2_reg_993));
    tmp7_fu_595_p2 <= std_logic_vector(unsigned(tmp_1_0_2_1_reg_1018) + unsigned(tmp_1_0_2_2_reg_933));
    tmp8_fu_685_p2 <= std_logic_vector(unsigned(tmp10_reg_1003) + unsigned(tmp9_reg_948));
    tmp9_fu_538_p2 <= std_logic_vector(unsigned(tmp_1_1_reg_903) + unsigned(reg_397));
    tmp_10_fu_460_p3 <= (i_1_reg_727 & ap_const_lv1_0);
    tmp_11_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_460_p3),64));
    tmp_12_fu_515_p2 <= (tmp_10_reg_782 or ap_const_lv3_1);
    tmp_13_fu_520_p3 <= (ap_const_lv61_0 & tmp_12_fu_515_p2);
    tmp_14_fu_487_p3 <= (tmp_4_0_2_fu_476_p2 & ap_const_lv1_0);
    tmp_15_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_487_p3),64));
    tmp_16_fu_562_p2 <= (tmp_14_reg_848 or ap_const_lv4_1);
    tmp_17_fu_567_p3 <= (ap_const_lv60_0 & tmp_16_fu_562_p2);
    tmp_1_0_0_1_fu_510_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_336) * signed(kernel_0_1_read_reg_770))), 32));
    tmp_1_0_1_1_fu_557_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_336) * signed(kernel_1_1_read_reg_808))), 32));
    tmp_1_0_2_1_fu_586_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_336) * signed(kernel_2_1_read_reg_826))), 32));
    tmp_1_2_0_2_fu_505_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_344) * signed(kernel_0_2_read_reg_776))), 32));
    tmp_1_2_1_2_fu_543_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_344) * signed(kernel_1_2_read_reg_814))), 32));
    tmp_1_2_1_fu_529_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_1_0_read_reg_802))), 32));
    tmp_1_2_2_2_fu_577_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_2_load_2_reg_918) * signed(kernel_2_2_read_reg_832))), 32));
    tmp_1_2_2_fu_548_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_2_0_read_reg_820))), 32));
    tmp_1_2_fu_500_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_340) * signed(kernel_0_0_read_reg_764))), 32));
    tmp_2_fu_428_p3 <= (ap_phi_mux_i_phi_fu_328_p4 & ap_const_lv1_0);
    tmp_3_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_428_p3),64));
    tmp_4_0_2_fu_476_p2 <= std_logic_vector(unsigned(i_cast_fu_472_p1) + unsigned(ap_const_lv3_2));
    tmp_4_fu_442_p2 <= (tmp_2_reg_734 or ap_const_lv3_1);
    tmp_5_0_1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_727),64));
    tmp_5_0_2_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_0_2_fu_476_p2),64));
    tmp_5_fu_447_p3 <= (ap_const_lv61_0 & tmp_4_fu_442_p2);
    tmp_6_fu_652_p3 <= (i_reg_324_pp0_iter1_reg & ap_const_lv2_0);
        tmp_7_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_664_p2),64));

    tmp_7_fu_664_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_660_p1) - unsigned(tmp_cast_fu_648_p1));
        tmp_8_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_703_p2),64));

    tmp_8_fu_703_p2 <= std_logic_vector(signed(tmp_7_reg_1053) + signed(ap_const_lv5_1));
        tmp_9_cast_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_713_p2),64));

    tmp_9_fu_713_p2 <= std_logic_vector(signed(tmp_7_reg_1053) + signed(ap_const_lv5_2));
    tmp_cast_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_324_pp0_iter1_reg),5));
    tmp_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_328_p4),64));
end behav;
