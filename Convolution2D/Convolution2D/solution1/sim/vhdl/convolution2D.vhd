-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_1_ce1 : OUT STD_LOGIC;
    input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce1 : OUT STD_LOGIC;
    input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_0_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_1_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_2_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_2_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_2_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolution2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=70,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=648,HLS_SYN_LUT=911,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_310_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_325_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast_reg_673 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_335_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_681 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_357_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_688 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_1_cast_fu_363_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_1_cast_reg_693 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_2_fu_367_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_2_reg_698 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_fu_383_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_708 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_393_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_713 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_398_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex_trunc1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex_trunc1_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond2_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond2_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex_cast_fu_482_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal newIndex_cast_reg_768 : STD_LOGIC_VECTOR (2 downto 0);
    signal input_1_load_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_0_2_phi_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_0_2_phi_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_1_2_phi_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_1_2_phi_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_2_1_phi_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_2_2_phi_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_2_2_phi_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_1_2_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_fu_631_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_reg_280 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_292 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_6_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_345_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_353_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_341_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_389_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_402_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_430_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_cast_fu_373_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_0_2_fu_452_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_fu_458_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal arrayNo63_mask_fu_468_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_485_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_497_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_507_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_517_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_529_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_541_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_550_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_556_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_0_1_fu_568_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_fu_587_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_fu_592_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_fu_609_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_fu_615_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_fu_620_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_fu_626_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_fu_631_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_640_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_377_p2 = ap_const_lv1_1))) then 
                i_reg_280 <= i_1_reg_681;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_280 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_329_p2 = ap_const_lv1_0))) then 
                j_reg_292 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_reg_292 <= j_1_reg_708;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_377_p2 = ap_const_lv1_0))) then
                cond2_reg_761 <= cond2_fu_476_p2;
                newIndex_trunc1_reg_740 <= newIndex_trunc1_fu_424_p2;
                tmp_13_reg_735 <= j_reg_292(1 downto 1);
                tmp_20_reg_756 <= j_1_fu_383_p2(1 downto 1);
                tmp_4_reg_713 <= tmp_4_fu_393_p2;
                tmp_reg_718 <= tmp_fu_398_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_681 <= i_1_fu_335_p2;
                    i_cast_reg_673(1 downto 0) <= i_cast_fu_325_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_1_load_reg_793 <= input_1_q0;
                    newIndex_cast_reg_768(0) <= newIndex_cast_fu_482_p1(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_load_0_2_phi_reg_843 <= input_load_0_2_phi_fu_574_p3;
                input_load_1_2_phi_reg_848 <= input_load_1_2_phi_fu_580_p3;
                tmp_1_0_1_reg_838 <= tmp_1_0_1_fu_568_p2;
                tmp_1_reg_823 <= tmp_1_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_load_2_1_phi_reg_863 <= grp_fu_310_p3;
                input_load_2_2_phi_reg_868 <= input_load_2_2_phi_fu_598_p3;
                tmp2_reg_873 <= tmp2_fu_605_p2;
                tmp_1_0_2_reg_853 <= tmp_1_0_2_fu_587_p2;
                tmp_1_1_reg_858 <= tmp_1_1_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_708 <= j_1_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_317 <= grp_fu_303_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_321 <= grp_fu_310_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp3_reg_903 <= tmp3_fu_636_p2;
                tmp_1_1_1_reg_878 <= tmp_1_1_1_fu_609_p2;
                tmp_1_1_2_reg_883 <= tmp_1_1_2_fu_615_p2;
                tmp_1_2_1_reg_893 <= tmp_1_2_1_fu_626_p2;
                tmp_1_2_2_reg_898 <= tmp_1_2_2_fu_631_p2;
                tmp_1_2_reg_888 <= tmp_1_2_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp4_reg_908 <= tmp4_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_329_p2 = ap_const_lv1_0))) then
                tmp_3_reg_688 <= tmp_3_fu_357_p2;
                tmp_4_2_reg_698 <= tmp_4_2_fu_367_p2;
                    tmp_5_1_cast_reg_693(1 downto 0) <= tmp_5_1_cast_fu_363_p1(1 downto 0);
            end if;
        end if;
    end process;
    i_cast_reg_673(2) <= '0';
    tmp_5_1_cast_reg_693(2) <= '0';
    newIndex_cast_reg_768(2 downto 1) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_329_p2, ap_CS_fsm_state3, exitcond2_fu_377_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_329_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_377_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_329_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_329_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_329_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_329_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo63_mask_fu_468_p3 <= (tmp_21_fu_458_p4 & ap_const_lv1_0);
    cond2_fu_476_p2 <= "1" when (arrayNo63_mask_fu_468_p3 = ap_const_lv3_2) else "0";
    exitcond2_fu_377_p2 <= "1" when (j_reg_292 = ap_const_lv2_3) else "0";
    exitcond3_fu_329_p2 <= "1" when (i_reg_280 = ap_const_lv2_3) else "0";
    grp_fu_303_p3 <= 
        input_1_q0 when (tmp_13_reg_735(0) = '1') else 
        input_0_q0;
    grp_fu_310_p3 <= 
        input_1_q1 when (tmp_20_reg_756(0) = '1') else 
        input_0_q1;
    i_1_fu_335_p2 <= std_logic_vector(unsigned(i_reg_280) + unsigned(ap_const_lv2_1));
    i_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_280),3));

    input_0_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_6_fu_410_p1, tmp_8_fu_491_p1, tmp_9_fu_535_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_0_address0 <= tmp_9_fu_535_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_address0 <= tmp_8_fu_491_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_address0 <= tmp_6_fu_410_p1(4 - 1 downto 0);
        else 
            input_0_address0 <= "XXXX";
        end if; 
    end process;


    input_0_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_15_fu_438_p1, tmp_17_fu_523_p1, tmp_19_fu_562_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_0_address1 <= tmp_19_fu_562_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_address1 <= tmp_17_fu_523_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_address1 <= tmp_15_fu_438_p1(4 - 1 downto 0);
        else 
            input_0_address1 <= "XXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_6_fu_410_p1, tmp_8_fu_491_p1, tmp_9_fu_535_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_1_address0 <= tmp_9_fu_535_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_1_address0 <= tmp_8_fu_491_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_1_address0 <= tmp_6_fu_410_p1(4 - 1 downto 0);
        else 
            input_1_address0 <= "XXXX";
        end if; 
    end process;


    input_1_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_15_fu_438_p1, tmp_17_fu_523_p1, tmp_19_fu_562_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_1_address1 <= tmp_19_fu_562_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_1_address1 <= tmp_17_fu_523_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_1_address1 <= tmp_15_fu_438_p1(4 - 1 downto 0);
        else 
            input_1_address1 <= "XXXX";
        end if; 
    end process;


    input_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_1_ce1 <= ap_const_logic_1;
        else 
            input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_12_cast_fu_502_p1, tmp_14_cast_fu_545_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_2_address0 <= tmp_14_cast_fu_545_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_2_address0 <= tmp_12_cast_fu_502_p1(3 - 1 downto 0);
        else 
            input_2_address0 <= "XXX";
        end if; 
    end process;

    input_2_address1 <= tmp_13_cast_fu_512_p1(3 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_2_ce1 <= ap_const_logic_1;
        else 
            input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_load_0_2_phi_fu_574_p3 <= 
        input_1_load_reg_793 when (cond2_reg_761(0) = '1') else 
        input_2_q0;
    input_load_1_2_phi_fu_580_p3 <= 
        input_1_q0 when (cond2_reg_761(0) = '1') else 
        input_2_q1;
    input_load_2_2_phi_fu_598_p3 <= 
        input_1_q0 when (cond2_reg_761(0) = '1') else 
        input_2_q0;
    j_1_fu_383_p2 <= std_logic_vector(unsigned(j_reg_292) + unsigned(ap_const_lv2_1));
    j_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_292),3));
    newIndex_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_718),3));
    newIndex_trunc1_fu_424_p2 <= (tmp_fu_398_p1 xor ap_const_lv1_1);
    output_r_address0 <= tmp_4_cast_fu_659_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(unsigned(tmp4_reg_908) + unsigned(tmp1_fu_663_p2));

    output_r_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_345_p3),5));
    tmp1_fu_663_p2 <= std_logic_vector(unsigned(tmp3_reg_903) + unsigned(tmp2_reg_873));
    tmp2_fu_605_p2 <= std_logic_vector(unsigned(tmp_1_0_1_reg_838) + unsigned(tmp_1_reg_823));
    tmp3_fu_636_p2 <= std_logic_vector(unsigned(tmp_1_0_2_reg_853) + unsigned(tmp_1_1_reg_858));
    tmp4_fu_653_p2 <= std_logic_vector(unsigned(tmp6_fu_648_p2) + unsigned(tmp5_fu_640_p2));
    tmp5_fu_640_p2 <= std_logic_vector(unsigned(tmp_1_1_1_reg_878) + unsigned(tmp_1_1_2_reg_883));
    tmp6_fu_648_p2 <= std_logic_vector(unsigned(tmp7_fu_644_p2) + unsigned(tmp_1_2_reg_888));
    tmp7_fu_644_p2 <= std_logic_vector(unsigned(tmp_1_2_1_reg_893) + unsigned(tmp_1_2_2_reg_898));
    tmp_10_fu_497_p2 <= std_logic_vector(unsigned(newIndex_cast_fu_482_p1) + unsigned(i_cast_reg_673));
    tmp_11_fu_507_p2 <= std_logic_vector(unsigned(newIndex_cast_fu_482_p1) + unsigned(tmp_5_1_cast_reg_693));
    tmp_12_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_497_p2),64));
    tmp_12_fu_541_p2 <= std_logic_vector(unsigned(newIndex_cast_reg_768) + unsigned(tmp_4_2_reg_698));
    tmp_13_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_507_p2),64));
    tmp_14_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_541_p2),64));
    tmp_14_fu_430_p3 <= (i_reg_280 & newIndex_trunc1_fu_424_p2);
    tmp_15_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_430_p3),64));
    tmp_16_fu_517_p3 <= (i_1_reg_681 & newIndex_trunc1_reg_740);
    tmp_17_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_517_p3),64));
    tmp_18_fu_556_p3 <= (tmp_4_2_reg_698 & newIndex_trunc1_reg_740);
    tmp_19_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_556_p3),64));
    tmp_1_0_1_fu_568_p0 <= kernel_0_1;
    tmp_1_0_1_fu_568_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_0_1_fu_568_p0) * signed(reg_321))), 32));
    tmp_1_0_2_fu_587_p0 <= kernel_0_2;
    tmp_1_0_2_fu_587_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_0_2_fu_587_p0) * signed(input_load_0_2_phi_reg_843))), 32));
    tmp_1_1_1_fu_609_p0 <= kernel_1_1;
    tmp_1_1_1_fu_609_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_1_1_fu_609_p0) * signed(reg_321))), 32));
    tmp_1_1_2_fu_615_p0 <= kernel_1_2;
    tmp_1_1_2_fu_615_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_1_2_fu_615_p0) * signed(input_load_1_2_phi_reg_848))), 32));
    tmp_1_1_fu_592_p0 <= kernel_1_0;
    tmp_1_1_fu_592_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_1_fu_592_p0) * signed(reg_317))), 32));
    tmp_1_2_1_fu_626_p0 <= kernel_2_1;
    tmp_1_2_1_fu_626_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_2_1_fu_626_p0) * signed(input_load_2_1_phi_reg_863))), 32));
    tmp_1_2_2_fu_631_p0 <= kernel_2_2;
    tmp_1_2_2_fu_631_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_2_2_fu_631_p0) * signed(input_load_2_2_phi_reg_868))), 32));
    tmp_1_2_fu_620_p0 <= kernel_2_0;
    tmp_1_2_fu_620_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_2_fu_620_p0) * signed(reg_317))), 32));
    tmp_1_fu_550_p0 <= kernel_0_0;
    tmp_1_fu_550_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_fu_550_p0) * signed(reg_317))), 32));
    tmp_21_fu_458_p4 <= tmp_8_0_2_fu_452_p2(2 downto 1);
    tmp_2_fu_345_p3 <= (i_reg_280 & ap_const_lv2_0);
    tmp_3_fu_357_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_353_p1) - unsigned(tmp_cast_fu_341_p1));
    tmp_4_2_fu_367_p2 <= std_logic_vector(unsigned(i_cast_fu_325_p1) + unsigned(ap_const_lv3_2));
        tmp_4_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_713),64));

    tmp_4_fu_393_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_389_p1) + unsigned(tmp_3_reg_688));
    tmp_5_1_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_335_p2),3));
    tmp_5_fu_402_p3 <= (i_reg_280 & tmp_fu_398_p1);
    tmp_6_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_402_p3),64));
    tmp_7_fu_485_p3 <= (i_1_reg_681 & tmp_reg_718);
    tmp_8_0_2_fu_452_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(j_cast_fu_373_p1));
    tmp_8_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_485_p3),64));
    tmp_9_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_292),5));
    tmp_9_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_529_p3),64));
    tmp_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_280),5));
    tmp_fu_398_p1 <= j_reg_292(1 - 1 downto 0);
    tmp_s_fu_529_p3 <= (tmp_4_2_reg_698 & tmp_reg_718);
end behav;
