// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolution2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=70,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=648,HLS_SYN_LUT=911,HLS_VERSION=2018_3}" *)

module convolution2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_0_address1,
        input_0_ce1,
        input_0_q1,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_1_address1,
        input_1_ce1,
        input_1_q1,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_2_address1,
        input_2_ce1,
        input_2_q1,
        kernel_0_0,
        kernel_0_1,
        kernel_0_2,
        kernel_1_0,
        kernel_1_1,
        kernel_1_2,
        kernel_2_0,
        kernel_2_1,
        kernel_2_2,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [3:0] input_0_address1;
output   input_0_ce1;
input  [31:0] input_0_q1;
output  [3:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [3:0] input_1_address1;
output   input_1_ce1;
input  [31:0] input_1_q1;
output  [2:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [2:0] input_2_address1;
output   input_2_ce1;
input  [31:0] input_2_q1;
input  [31:0] kernel_0_0;
input  [31:0] kernel_0_1;
input  [31:0] kernel_0_2;
input  [31:0] kernel_1_0;
input  [31:0] kernel_1_1;
input  [31:0] kernel_1_2;
input  [31:0] kernel_2_0;
input  [31:0] kernel_2_1;
input  [31:0] kernel_2_2;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] input_0_address0;
reg input_0_ce0;
reg[3:0] input_0_address1;
reg input_0_ce1;
reg[3:0] input_1_address0;
reg input_1_ce0;
reg[3:0] input_1_address1;
reg input_1_ce1;
reg[2:0] input_2_address0;
reg input_2_ce0;
reg input_2_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] grp_fu_303_p3;
reg  signed [31:0] reg_317;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire  signed [31:0] grp_fu_310_p3;
reg  signed [31:0] reg_321;
wire   [2:0] i_cast_fu_325_p1;
reg   [2:0] i_cast_reg_673;
wire    ap_CS_fsm_state2;
wire   [1:0] i_1_fu_335_p2;
reg   [1:0] i_1_reg_681;
wire   [4:0] tmp_3_fu_357_p2;
reg   [4:0] tmp_3_reg_688;
wire   [0:0] exitcond3_fu_329_p2;
wire   [2:0] tmp_5_1_cast_fu_363_p1;
reg   [2:0] tmp_5_1_cast_reg_693;
wire   [2:0] tmp_4_2_fu_367_p2;
reg   [2:0] tmp_4_2_reg_698;
wire   [1:0] j_1_fu_383_p2;
reg   [1:0] j_1_reg_708;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_4_fu_393_p2;
reg   [4:0] tmp_4_reg_713;
wire   [0:0] exitcond2_fu_377_p2;
wire   [0:0] tmp_fu_398_p1;
reg   [0:0] tmp_reg_718;
reg   [0:0] tmp_13_reg_735;
wire   [0:0] newIndex_trunc1_fu_424_p2;
reg   [0:0] newIndex_trunc1_reg_740;
reg   [0:0] tmp_20_reg_756;
wire   [0:0] cond2_fu_476_p2;
reg   [0:0] cond2_reg_761;
wire   [2:0] newIndex_cast_fu_482_p1;
reg   [2:0] newIndex_cast_reg_768;
reg   [31:0] input_1_load_reg_793;
wire   [31:0] tmp_1_fu_550_p2;
reg   [31:0] tmp_1_reg_823;
wire   [31:0] tmp_1_0_1_fu_568_p2;
reg   [31:0] tmp_1_0_1_reg_838;
wire  signed [31:0] input_load_0_2_phi_fu_574_p3;
reg  signed [31:0] input_load_0_2_phi_reg_843;
wire  signed [31:0] input_load_1_2_phi_fu_580_p3;
reg  signed [31:0] input_load_1_2_phi_reg_848;
wire   [31:0] tmp_1_0_2_fu_587_p2;
reg   [31:0] tmp_1_0_2_reg_853;
wire   [31:0] tmp_1_1_fu_592_p2;
reg   [31:0] tmp_1_1_reg_858;
reg  signed [31:0] input_load_2_1_phi_reg_863;
wire  signed [31:0] input_load_2_2_phi_fu_598_p3;
reg  signed [31:0] input_load_2_2_phi_reg_868;
wire   [31:0] tmp2_fu_605_p2;
reg   [31:0] tmp2_reg_873;
wire   [31:0] tmp_1_1_1_fu_609_p2;
reg   [31:0] tmp_1_1_1_reg_878;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_1_1_2_fu_615_p2;
reg   [31:0] tmp_1_1_2_reg_883;
wire   [31:0] tmp_1_2_fu_620_p2;
reg   [31:0] tmp_1_2_reg_888;
wire   [31:0] tmp_1_2_1_fu_626_p2;
reg   [31:0] tmp_1_2_1_reg_893;
wire   [31:0] tmp_1_2_2_fu_631_p2;
reg   [31:0] tmp_1_2_2_reg_898;
wire   [31:0] tmp3_fu_636_p2;
reg   [31:0] tmp3_reg_903;
wire   [31:0] tmp4_fu_653_p2;
reg   [31:0] tmp4_reg_908;
wire    ap_CS_fsm_state8;
reg   [1:0] i_reg_280;
reg   [1:0] j_reg_292;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_6_fu_410_p1;
wire   [63:0] tmp_15_fu_438_p1;
wire   [63:0] tmp_8_fu_491_p1;
wire   [63:0] tmp_12_cast_fu_502_p1;
wire   [63:0] tmp_13_cast_fu_512_p1;
wire   [63:0] tmp_17_fu_523_p1;
wire   [63:0] tmp_9_fu_535_p1;
wire   [63:0] tmp_14_cast_fu_545_p1;
wire   [63:0] tmp_19_fu_562_p1;
wire  signed [63:0] tmp_4_cast_fu_659_p1;
wire   [3:0] tmp_2_fu_345_p3;
wire   [4:0] p_shl_cast_fu_353_p1;
wire   [4:0] tmp_cast_fu_341_p1;
wire   [4:0] tmp_9_cast_fu_389_p1;
wire   [2:0] tmp_5_fu_402_p3;
wire   [2:0] tmp_14_fu_430_p3;
wire   [2:0] j_cast_fu_373_p1;
wire   [2:0] tmp_8_0_2_fu_452_p2;
wire   [1:0] tmp_21_fu_458_p4;
wire   [2:0] arrayNo63_mask_fu_468_p3;
wire   [2:0] tmp_7_fu_485_p3;
wire   [2:0] tmp_10_fu_497_p2;
wire   [2:0] tmp_11_fu_507_p2;
wire   [2:0] tmp_16_fu_517_p3;
wire   [3:0] tmp_s_fu_529_p3;
wire   [2:0] tmp_12_fu_541_p2;
wire  signed [31:0] tmp_1_fu_550_p0;
wire   [3:0] tmp_18_fu_556_p3;
wire  signed [31:0] tmp_1_0_1_fu_568_p0;
wire  signed [31:0] tmp_1_0_2_fu_587_p0;
wire  signed [31:0] tmp_1_1_fu_592_p0;
wire  signed [31:0] tmp_1_1_1_fu_609_p0;
wire  signed [31:0] tmp_1_1_2_fu_615_p0;
wire  signed [31:0] tmp_1_2_fu_620_p0;
wire  signed [31:0] tmp_1_2_1_fu_626_p0;
wire  signed [31:0] tmp_1_2_2_fu_631_p0;
wire   [31:0] tmp7_fu_644_p2;
wire   [31:0] tmp6_fu_648_p2;
wire   [31:0] tmp5_fu_640_p2;
wire   [31:0] tmp1_fu_663_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_377_p2 == 1'd1))) begin
        i_reg_280 <= i_1_reg_681;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_280 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_329_p2 == 1'd0))) begin
        j_reg_292 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_292 <= j_1_reg_708;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_377_p2 == 1'd0))) begin
        cond2_reg_761 <= cond2_fu_476_p2;
        newIndex_trunc1_reg_740 <= newIndex_trunc1_fu_424_p2;
        tmp_13_reg_735 <= j_reg_292[32'd1];
        tmp_20_reg_756 <= j_1_fu_383_p2[32'd1];
        tmp_4_reg_713 <= tmp_4_fu_393_p2;
        tmp_reg_718 <= tmp_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_681 <= i_1_fu_335_p2;
        i_cast_reg_673[1 : 0] <= i_cast_fu_325_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_1_load_reg_793 <= input_1_q0;
        newIndex_cast_reg_768[0] <= newIndex_cast_fu_482_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_load_0_2_phi_reg_843 <= input_load_0_2_phi_fu_574_p3;
        input_load_1_2_phi_reg_848 <= input_load_1_2_phi_fu_580_p3;
        tmp_1_0_1_reg_838 <= tmp_1_0_1_fu_568_p2;
        tmp_1_reg_823 <= tmp_1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_load_2_1_phi_reg_863 <= grp_fu_310_p3;
        input_load_2_2_phi_reg_868 <= input_load_2_2_phi_fu_598_p3;
        tmp2_reg_873 <= tmp2_fu_605_p2;
        tmp_1_0_2_reg_853 <= tmp_1_0_2_fu_587_p2;
        tmp_1_1_reg_858 <= tmp_1_1_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_708 <= j_1_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_317 <= grp_fu_303_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_321 <= grp_fu_310_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp3_reg_903 <= tmp3_fu_636_p2;
        tmp_1_1_1_reg_878 <= tmp_1_1_1_fu_609_p2;
        tmp_1_1_2_reg_883 <= tmp_1_1_2_fu_615_p2;
        tmp_1_2_1_reg_893 <= tmp_1_2_1_fu_626_p2;
        tmp_1_2_2_reg_898 <= tmp_1_2_2_fu_631_p2;
        tmp_1_2_reg_888 <= tmp_1_2_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp4_reg_908 <= tmp4_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_329_p2 == 1'd0))) begin
        tmp_3_reg_688 <= tmp_3_fu_357_p2;
        tmp_4_2_reg_698 <= tmp_4_2_fu_367_p2;
        tmp_5_1_cast_reg_693[1 : 0] <= tmp_5_1_cast_fu_363_p1[1 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_329_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_329_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_0_address0 = tmp_9_fu_535_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_address0 = tmp_8_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_address0 = tmp_6_fu_410_p1;
    end else begin
        input_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_0_address1 = tmp_19_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_address1 = tmp_17_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_address1 = tmp_15_fu_438_p1;
    end else begin
        input_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        input_0_ce1 = 1'b1;
    end else begin
        input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_address0 = tmp_9_fu_535_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_1_address0 = tmp_8_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_1_address0 = tmp_6_fu_410_p1;
    end else begin
        input_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_address1 = tmp_19_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_1_address1 = tmp_17_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_1_address1 = tmp_15_fu_438_p1;
    end else begin
        input_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        input_1_ce1 = 1'b1;
    end else begin
        input_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_address0 = tmp_14_cast_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_2_address0 = tmp_12_cast_fu_502_p1;
    end else begin
        input_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_2_ce1 = 1'b1;
    end else begin
        input_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_329_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_377_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo63_mask_fu_468_p3 = {{tmp_21_fu_458_p4}, {1'd0}};

assign cond2_fu_476_p2 = ((arrayNo63_mask_fu_468_p3 == 3'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_377_p2 = ((j_reg_292 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_329_p2 = ((i_reg_280 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_303_p3 = ((tmp_13_reg_735[0:0] === 1'b1) ? input_1_q0 : input_0_q0);

assign grp_fu_310_p3 = ((tmp_20_reg_756[0:0] === 1'b1) ? input_1_q1 : input_0_q1);

assign i_1_fu_335_p2 = (i_reg_280 + 2'd1);

assign i_cast_fu_325_p1 = i_reg_280;

assign input_2_address1 = tmp_13_cast_fu_512_p1;

assign input_load_0_2_phi_fu_574_p3 = ((cond2_reg_761[0:0] === 1'b1) ? input_1_load_reg_793 : input_2_q0);

assign input_load_1_2_phi_fu_580_p3 = ((cond2_reg_761[0:0] === 1'b1) ? input_1_q0 : input_2_q1);

assign input_load_2_2_phi_fu_598_p3 = ((cond2_reg_761[0:0] === 1'b1) ? input_1_q0 : input_2_q0);

assign j_1_fu_383_p2 = (j_reg_292 + 2'd1);

assign j_cast_fu_373_p1 = j_reg_292;

assign newIndex_cast_fu_482_p1 = tmp_reg_718;

assign newIndex_trunc1_fu_424_p2 = (tmp_fu_398_p1 ^ 1'd1);

assign output_r_address0 = tmp_4_cast_fu_659_p1;

assign output_r_d0 = (tmp4_reg_908 + tmp1_fu_663_p2);

assign p_shl_cast_fu_353_p1 = tmp_2_fu_345_p3;

assign tmp1_fu_663_p2 = (tmp3_reg_903 + tmp2_reg_873);

assign tmp2_fu_605_p2 = (tmp_1_0_1_reg_838 + tmp_1_reg_823);

assign tmp3_fu_636_p2 = (tmp_1_0_2_reg_853 + tmp_1_1_reg_858);

assign tmp4_fu_653_p2 = (tmp6_fu_648_p2 + tmp5_fu_640_p2);

assign tmp5_fu_640_p2 = (tmp_1_1_1_reg_878 + tmp_1_1_2_reg_883);

assign tmp6_fu_648_p2 = (tmp7_fu_644_p2 + tmp_1_2_reg_888);

assign tmp7_fu_644_p2 = (tmp_1_2_1_reg_893 + tmp_1_2_2_reg_898);

assign tmp_10_fu_497_p2 = (newIndex_cast_fu_482_p1 + i_cast_reg_673);

assign tmp_11_fu_507_p2 = (newIndex_cast_fu_482_p1 + tmp_5_1_cast_reg_693);

assign tmp_12_cast_fu_502_p1 = tmp_10_fu_497_p2;

assign tmp_12_fu_541_p2 = (newIndex_cast_reg_768 + tmp_4_2_reg_698);

assign tmp_13_cast_fu_512_p1 = tmp_11_fu_507_p2;

assign tmp_14_cast_fu_545_p1 = tmp_12_fu_541_p2;

assign tmp_14_fu_430_p3 = {{i_reg_280}, {newIndex_trunc1_fu_424_p2}};

assign tmp_15_fu_438_p1 = tmp_14_fu_430_p3;

assign tmp_16_fu_517_p3 = {{i_1_reg_681}, {newIndex_trunc1_reg_740}};

assign tmp_17_fu_523_p1 = tmp_16_fu_517_p3;

assign tmp_18_fu_556_p3 = {{tmp_4_2_reg_698}, {newIndex_trunc1_reg_740}};

assign tmp_19_fu_562_p1 = tmp_18_fu_556_p3;

assign tmp_1_0_1_fu_568_p0 = kernel_0_1;

assign tmp_1_0_1_fu_568_p2 = ($signed(tmp_1_0_1_fu_568_p0) * $signed(reg_321));

assign tmp_1_0_2_fu_587_p0 = kernel_0_2;

assign tmp_1_0_2_fu_587_p2 = ($signed(tmp_1_0_2_fu_587_p0) * $signed(input_load_0_2_phi_reg_843));

assign tmp_1_1_1_fu_609_p0 = kernel_1_1;

assign tmp_1_1_1_fu_609_p2 = ($signed(tmp_1_1_1_fu_609_p0) * $signed(reg_321));

assign tmp_1_1_2_fu_615_p0 = kernel_1_2;

assign tmp_1_1_2_fu_615_p2 = ($signed(tmp_1_1_2_fu_615_p0) * $signed(input_load_1_2_phi_reg_848));

assign tmp_1_1_fu_592_p0 = kernel_1_0;

assign tmp_1_1_fu_592_p2 = ($signed(tmp_1_1_fu_592_p0) * $signed(reg_317));

assign tmp_1_2_1_fu_626_p0 = kernel_2_1;

assign tmp_1_2_1_fu_626_p2 = ($signed(tmp_1_2_1_fu_626_p0) * $signed(input_load_2_1_phi_reg_863));

assign tmp_1_2_2_fu_631_p0 = kernel_2_2;

assign tmp_1_2_2_fu_631_p2 = ($signed(tmp_1_2_2_fu_631_p0) * $signed(input_load_2_2_phi_reg_868));

assign tmp_1_2_fu_620_p0 = kernel_2_0;

assign tmp_1_2_fu_620_p2 = ($signed(tmp_1_2_fu_620_p0) * $signed(reg_317));

assign tmp_1_fu_550_p0 = kernel_0_0;

assign tmp_1_fu_550_p2 = ($signed(tmp_1_fu_550_p0) * $signed(reg_317));

assign tmp_21_fu_458_p4 = {{tmp_8_0_2_fu_452_p2[2:1]}};

assign tmp_2_fu_345_p3 = {{i_reg_280}, {2'd0}};

assign tmp_3_fu_357_p2 = (p_shl_cast_fu_353_p1 - tmp_cast_fu_341_p1);

assign tmp_4_2_fu_367_p2 = (i_cast_fu_325_p1 + 3'd2);

assign tmp_4_cast_fu_659_p1 = $signed(tmp_4_reg_713);

assign tmp_4_fu_393_p2 = (tmp_9_cast_fu_389_p1 + tmp_3_reg_688);

assign tmp_5_1_cast_fu_363_p1 = i_1_fu_335_p2;

assign tmp_5_fu_402_p3 = {{i_reg_280}, {tmp_fu_398_p1}};

assign tmp_6_fu_410_p1 = tmp_5_fu_402_p3;

assign tmp_7_fu_485_p3 = {{i_1_reg_681}, {tmp_reg_718}};

assign tmp_8_0_2_fu_452_p2 = (3'd2 + j_cast_fu_373_p1);

assign tmp_8_fu_491_p1 = tmp_7_fu_485_p3;

assign tmp_9_cast_fu_389_p1 = j_reg_292;

assign tmp_9_fu_535_p1 = tmp_s_fu_529_p3;

assign tmp_cast_fu_341_p1 = i_reg_280;

assign tmp_fu_398_p1 = j_reg_292[0:0];

assign tmp_s_fu_529_p3 = {{tmp_4_2_reg_698}, {tmp_reg_718}};

always @ (posedge ap_clk) begin
    i_cast_reg_673[2] <= 1'b0;
    tmp_5_1_cast_reg_693[2] <= 1'b0;
    newIndex_cast_reg_768[2:1] <= 2'b00;
end

endmodule //convolution2D
